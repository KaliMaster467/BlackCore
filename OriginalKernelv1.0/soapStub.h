/* soapStub.h
   Generated by gSOAP 2.8.36 for RegistryOperations.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <iostream>

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20836
# error "GSOAP VERSION 20836 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns__User;	/* Objects/Usuario.h:2 */
struct ns__InsertUserResponse;	/* RegistryOperations.h:7 */
struct ns__InsertUser;	/* RegistryOperations.h:7 */
struct ns__GetUserResponse;	/* RegistryOperations.h:9 */
struct ns__GetUser;	/* RegistryOperations.h:9 */

/* Objects/Usuario.h:2 */
#ifndef SOAP_TYPE_ns__User
#define SOAP_TYPE_ns__User (7)
/* complex XSD type 'ns:User': */
class SOAP_CMAC ns__User {
      public:
        /// Required element 'Id' of XSD type 'xsd:int'
        int Id;
        /// Optional element 'RegisterDate' of XSD type 'xsd:string'
        char *RegisterDate;
        /// Optional element 'FLastName' of XSD type 'xsd:string'
        char *FLastName;
        /// Optional element 'SLastName' of XSD type 'xsd:string'
        char *SLastName;
        /// Optional element 'Name' of XSD type 'xsd:string'
        char *Name;
        /// Required element 'Telephone' of XSD type 'xsd:int'
        int Telephone;
        /// Optional element 'Email' of XSD type 'xsd:string'
        char *Email;
        /// Optional element 'Delegation' of XSD type 'xsd:string'
        char *Delegation;
        /// Optional element 'Direction' of XSD type 'xsd:string'
        char *Direction;
        /// Optional element 'Status' of XSD type 'xsd:string'
        char *Status;
      public:
        /// Return unique type id SOAP_TYPE_ns__User
        virtual int soap_type(void) const { return SOAP_TYPE_ns__User; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__User, default initialized and not managed by a soap context
        virtual ns__User *soap_alloc(void) const { return SOAP_NEW(ns__User); }
      public:
        /// Constructor with initializations
        ns__User()
        {
          Id = (int)0;
          RegisterDate = (char *)0;
          FLastName = (char *)0;
          SLastName = (char *)0;
          Name = (char *)0;
          Telephone = (int)0;
          Email = (char *)0;
          Delegation = (char *)0;
          Direction = (char *)0;
          Status = (char *)0;
        }
        virtual ~ns__User() { }
        /// Friend allocator used by soap_new_ns__User(struct soap*, int)
        friend SOAP_FMAC1 ns__User * SOAP_FMAC2 soap_instantiate_ns__User(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* RegistryOperations.h:7 */
#ifndef SOAP_TYPE_ns__InsertUserResponse
#define SOAP_TYPE_ns__InsertUserResponse (10)
/* complex XSD type 'ns:InsertUserResponse': */
struct ns__InsertUserResponse {
      public:
        /** Optional element 'result-soap' of XSD type 'xsd:string' */
        char *result_soap;
      public:
        /** Return unique type id SOAP_TYPE_ns__InsertUserResponse */
        int soap_type() const { return SOAP_TYPE_ns__InsertUserResponse; }
        /** Constructor with member initializations */
        ns__InsertUserResponse()
        {
          result_soap = (char *)0;
        }
        /** Friend allocator used by soap_new_ns__InsertUserResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns__InsertUserResponse * SOAP_FMAC2 soap_instantiate_ns__InsertUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* RegistryOperations.h:7 */
#ifndef SOAP_TYPE_ns__InsertUser
#define SOAP_TYPE_ns__InsertUser (11)
/* complex XSD type 'ns:InsertUser': */
struct ns__InsertUser {
      public:
        /** Optional element 'userIn' of XSD type 'ns:User' */
        ns__User *userIn;
      public:
        /** Return unique type id SOAP_TYPE_ns__InsertUser */
        int soap_type() const { return SOAP_TYPE_ns__InsertUser; }
        /** Constructor with member initializations */
        ns__InsertUser()
        {
          userIn = (ns__User *)0;
        }
        /** Friend allocator used by soap_new_ns__InsertUser(struct soap*, int) */
        friend SOAP_FMAC1 ns__InsertUser * SOAP_FMAC2 soap_instantiate_ns__InsertUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* RegistryOperations.h:9 */
#ifndef SOAP_TYPE_ns__GetUserResponse
#define SOAP_TYPE_ns__GetUserResponse (13)
/* complex XSD type 'ns:GetUserResponse': */
struct ns__GetUserResponse {
      public:
        /** Optional element 'result-soap' of XSD type 'xsd:string' */
        char *result_soap;
      public:
        /** Return unique type id SOAP_TYPE_ns__GetUserResponse */
        int soap_type() const { return SOAP_TYPE_ns__GetUserResponse; }
        /** Constructor with member initializations */
        ns__GetUserResponse()
        {
          result_soap = (char *)0;
        }
        /** Friend allocator used by soap_new_ns__GetUserResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns__GetUserResponse * SOAP_FMAC2 soap_instantiate_ns__GetUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* RegistryOperations.h:9 */
#ifndef SOAP_TYPE_ns__GetUser
#define SOAP_TYPE_ns__GetUser (14)
/* complex XSD type 'ns:GetUser': */
struct ns__GetUser {
      public:
        /** Optional element 'user' of XSD type 'xsd:string' */
        char *user;
        /** Optional element 'pass' of XSD type 'xsd:string' */
        char *pass;
        /** Optional element 'userGet' of XSD type 'ns:User' */
        ns__User *userGet;
      public:
        /** Return unique type id SOAP_TYPE_ns__GetUser */
        int soap_type() const { return SOAP_TYPE_ns__GetUser; }
        /** Constructor with member initializations */
        ns__GetUser()
        {
          user = (char *)0;
          pass = (char *)0;
          userGet = (ns__User *)0;
        }
        /** Friend allocator used by soap_new_ns__GetUser(struct soap*, int) */
        friend SOAP_FMAC1 ns__GetUser * SOAP_FMAC2 soap_instantiate_ns__GetUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* RegistryOperations.h:10 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (15)
/* SOAP_ENV__Header: */
struct SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* RegistryOperations.h:10 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (16)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* RegistryOperations.h:10 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (18)
/* SOAP_ENV__Detail: */
struct SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* RegistryOperations.h:10 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (21)
/* SOAP_ENV__Reason: */
struct SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* RegistryOperations.h:10 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (22)
/* SOAP_ENV__Fault: */
struct SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* Objects/Usuario.h:2 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* Objects/Usuario.h:2 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* ns__User has binding name 'ns__User' for type 'ns:User' */
#ifndef SOAP_TYPE_ns__User
#define SOAP_TYPE_ns__User (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (22)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (21)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (18)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (16)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (15)
#endif

/* struct ns__GetUser has binding name 'ns__GetUser' for type 'ns:GetUser' */
#ifndef SOAP_TYPE_ns__GetUser
#define SOAP_TYPE_ns__GetUser (14)
#endif

/* struct ns__GetUserResponse has binding name 'ns__GetUserResponse' for type 'ns:GetUserResponse' */
#ifndef SOAP_TYPE_ns__GetUserResponse
#define SOAP_TYPE_ns__GetUserResponse (13)
#endif

/* struct ns__InsertUser has binding name 'ns__InsertUser' for type 'ns:InsertUser' */
#ifndef SOAP_TYPE_ns__InsertUser
#define SOAP_TYPE_ns__InsertUser (11)
#endif

/* struct ns__InsertUserResponse has binding name 'ns__InsertUserResponse' for type 'ns:InsertUserResponse' */
#ifndef SOAP_TYPE_ns__InsertUserResponse
#define SOAP_TYPE_ns__InsertUserResponse (10)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (24)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (23)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (17)
#endif

/* ns__User * has binding name 'PointerTons__User' for type 'ns:User' */
#ifndef SOAP_TYPE_PointerTons__User
#define SOAP_TYPE_PointerTons__User (8)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation 'ns__InsertUser' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns__InsertUser(struct soap*, ns__User *userIn, char *result_soap);
    /** Web service operation 'ns__GetUser' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns__GetUser(struct soap*, char *user, char *pass, ns__User *userGet, char *result_soap);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__InsertUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__GetUser(struct soap*);

#endif

/* End of soapStub.h */
